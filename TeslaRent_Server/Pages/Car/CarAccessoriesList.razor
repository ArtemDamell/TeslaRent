@*87.1 Назначаем путь к странице*@
@page "/car/accessories-list"

@inject ITeslaCarAccessoryRepository _db

@inject IJSRuntime _js

@*106. Добавляем атрибут доступа только для авторизованных пользователей*@
@attribute [Authorize]

<div class="row">
    <div class="col-6">
        <h1 class="text-info my-2">Accessories</h1>
    </div>
    <div class="col d-flex justify-content-end">
        <button type="button" class="btn btn-success my-2" @onclick="ShowCloseModal"><i class="fa-solid fa-square-plus"></i> New Acessory</button>
    </div>
</div>

@if (Accessories is null)
{
    <div class="alert alert-success text-center">
        <span>Loading items ... Wait ...</span>
    </div>
}
else if (Accessories.Any())
{
    <div class="row">
    <div class="col">
        <table class="table table-striped">
            <thead class="bg-info">
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Icon</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Accessories)
                {
                          <tr>
                            <td>@item.Name</td>
                            <td>@item.Description</td>
                            <td><i class="@item.Icon"></i></td>
                            <td>
                                    <div class="btn-group">
                                        <button class="btn btn-outline-primary" @onclick="(() => UpdateAccessory(item))"><i class="fas fa-pen-square"></i></button>
                                        <button class="btn btn-outline-secondary"><i class="fa-brands fa-readme"></i></button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteAccessory(item)"><i class="fas fa-trash"></i></button>
                                    </div>
                            </td>
                        </tr>
                }
            </tbody>
        </table>
    </div>
</div>
}
else 
{
    <div class="alert alert-info text-center">
        <span>No items ...</span>
    </div>
}

@if (showCloseModal)
{
    <CreateUpdateAccessory OnAccessory="accessoryDTO" OnShowCloseHandler="ShowCloseModal" OnSubmitHandler="SubmitHandler" />
}


@code {
    IEnumerable<CarAccessoryDTO> Accessories;
    bool showCloseModal = false;
    CarAccessoryDTO accessoryDTO = new();

    protected override async Task OnInitializedAsync()
    {
        Accessories = await _db.GetAllAccessoriesAsync();

    }

    void ShowCloseModal() 
    {
        if (showCloseModal)
            accessoryDTO = new();

        showCloseModal = !showCloseModal;
    }

    async Task SubmitHandler(CarAccessoryDTO carAccessory)
    {
        // Check, if ID = 0 -> Create accessory, else -> Update accessory
        if (carAccessory.Id.Equals(0))
        {
            // Create new accessory
            var result = await _db.CreateAccessoryAsync(carAccessory);

            if (result is not null)
            {
                await _js.ToastrSuccess($"{carAccessory.Name} creating successful");

                Accessories = await _db.GetAllAccessoriesAsync();
                ShowCloseModal();
            }
        }
        else
        {
            var result = await _db.UpdateAccessoryAsync(carAccessory);

            if (result is not null)
            {
                await _js.ToastrSuccess($"{result.Name} Updating successful!");

                Accessories = await _db.GetAllAccessoriesAsync();
                ShowCloseModal();
            }
        }
    }

    void UpdateAccessory(CarAccessoryDTO carAccessory)
    {
        accessoryDTO = carAccessory;
        ShowCloseModal();
    }

    async Task DeleteAccessory(CarAccessoryDTO accessory)
    {
        var result = await _db.DeleteAccessoryAsync(accessory.Id);

        if (result)
        {
            await _js.ToastrSuccess($"{accessory.Name} Deleting successful");
            Accessories = await _db.GetAllAccessoriesAsync();
        }
    }
}
