@inject ITeslaCarAccessoryRepository _db
@inject IJSRuntime _js

@if (OnShowCloseModal)
{
    <div class="modal show fade" data-backdrop="static" data-keyboard="false" id="deleteConfModal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-modal-dialog-centered" role="document">
            <EditForm Model="@OnAccessory" OnValidSubmit="SubmitHandler">
                <div class="modal-content">

                    <div class="modal-header bg-success">
                        <h5 class="modal-title text-white" id="exModalLabel">@title Accessory</h5>
                        <button type="button" class="btn-close bg-white" @onclick="() => OnShowCloseHandler.InvokeAsync(false)" datadata-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true"></span>
                        </button>
                    </div>

                    <div class="modal-body text-center">
                        <div class="row">
                            <div class="col">
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label class="text-left">Id: @OnAccessory.Id</label>
                                </div>
                                <div class="mb-3">
                                    <InputText @bind-Value="OnAccessory.Name" class="form-control" placeholder="Enter accessory name..." />
                                    <ValidationMessage For="() => OnAccessory.Name" />
                                </div>
                                <div class="mb-3">
                                    <InputTextArea @bind-Value="OnAccessory.Description" class="form-control" placeholder="Enter accessory description..." />
                                    <ValidationMessage For="() => OnAccessory.Description" />
                                </div>
                                <div class="mb-3">
                                    <InputText @bind-Value="OnAccessory.Icon" class="form-control" placeholder="Enter accessory icon class..." />
                                    <ValidationMessage For="() => OnAccessory.Icon" />
                                </div>
                               @* <div class="mb-3">
                                    <select class="form-control" @onchange="ChangeCurrentCarHandler">
                                        @if (allCarsList is not null)
                                        {
                                            @foreach (var item in allCarsList)
                                            {
                                                @if (!OnAccessory.Id.Equals(0) && OnAccessory.CarId.Equals(item.Id))
                                                {
                                                    <option selected value="@item.Id">@item.Name</option>
                                                }
                                                else
                                                {
                                                    <option value="@item.Id">@item.Name</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>*@
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-success" type="submit">
                            @title accessory
                        </button>
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => OnShowCloseHandler.InvokeAsync(false)" data-dismiss="modal">
                            Cancel
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public bool OnShowCloseModal { get; set; }
    [Parameter] public CarAccessoryDTO OnAccessory { get; set; }

    [Parameter] public EventCallback<bool> OnShowCloseHandler { get; set; }

    string title = "Create";

    async Task SubmitHandler()
    {
        if (OnAccessory.Id.Equals(0))
        {
            var result = await _db.CreateAccessoryAsync(OnAccessory);

            if (result is not null)
            {
                await _js.ToastrSuccess($"{result.Name} Creating successful!");
                await OnShowCloseHandler.InvokeAsync(true);
            }
        }
        else
        {
            var result = await _db.UpdateAccessoryAsync(OnAccessory);

            if (result is not null)
            {
                await _js.ToastrSuccess($"{result.Name} Updating successful!");
                await OnShowCloseHandler.InvokeAsync(true);
            }
        }

    }
}
