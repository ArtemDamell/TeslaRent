@*27.1 Создаём маршрут к компоненту*@
@page "/car-list"
@using TeslaRent_Server.Service.IService
@inject ITeslaCarRepository _db
@inject IJSRuntime _js
@inject IFileUpload _fileUpload

@*90.1 Внедряем менеджер для получения базового пути*@
@inject NavigationManager _navManager

@*27.2 Создаём разметку компонента*@
<div class="row mt-4">
	<div class="col-8">
		<h4 class="card-title text-info">All car's</h4>
	</div>
	<div class="col-3 offset-1">
		<NavLink href="car-list/create" class="btn btn-info form-control">Add New Car</NavLink>
	</div>
</div>

@*31.1 Создаём таблицу вывода машин*@
<div class="row mt-3">
	<div class="col">
		<table class="table table-striped table-hover">
			<thead class="bg-info">
				<tr>
					<th>Name</th>
					<th>Occupancy</th>
					<th>Rate</th>
					<th>Number of seats</th>
					<th>Accessories</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@if (Cars is not null && Cars.Any())
				{
					@foreach (var item in Cars)
				   {
					   <tr>
						   <td>@item.Name</td>
						   <td>@item.Occupancy</td>
						   <td>@item.RegularRate</td>
						   <td>@item.NumberOfSeats</td>
						   <td>
							   @if (item.CarAccessories is not null && item.CarAccessories.Any())
							   {
								   @foreach (var icon in item.CarAccessories)
								   {
									   <i class="@icon.Icon" style="margin-right: 5px; font-size: 30px;"></i>
								   }
							   }
						   </td>
						   <td>
							   @*47. Реализовываем кнопку редактирования машины*@
							   <NavLink class="btn btn-primary" href="@($"car-list/edit/{item.Id}")">Edit</NavLink>
							   @*77.1 / 77.3  Добавляем кнпку удаления машины из листа*@
							   <button class="btn btn-danger" @onclick="(() =>DeletingHandler(item))">Delete</button>
						   </td>
					   </tr>
				   }
				}
				else
				{
					<tr>
						<td colspan="5">
							<label>No cars found ...</label>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

@*76.1 Добавляем компонент на страницу*@
<DeleteConfirmation OnShowCloseModal="ShowCloseModal" OnCloseHandler="CloseModalHandler" OnCarForRemoving="objForRemoving" OnConfirmed="DeletingConfirmation" />


@code {
	// 31.2 Создаём переменную для хранения всех машин
	IEnumerable<TeslaCarDTO> Cars = new List<TeslaCarDTO>();

	// 76.2 / 76.2 Добавляем переменную для отображениея окна
	bool ShowCloseModal;

	// 77.3 / 77.3 Добавляем переменную для хранения ID удаляемой машины
	int? DeletingCarId;
	TeslaCarDTO? objForRemoving;

	// 31.3 Инициализируем массив значениями в методе жизненного цикла
	protected override async Task OnInitializedAsync()
	{
		Cars = await _db.GetAllCars();
	}

	// 77.2/ 77.3 Добавляем метод удаления
	async Task DeletingConfirmation(bool isConfirmed)
	{
		if (isConfirmed && DeletingCarId is not null)
		{
			// 79. Изменить метод удаления машин
			var carDTO = await _db.GetCar(DeletingCarId.Value);
			foreach(var item in carDTO.TeslaCarImages)
			{
				// 90.2 Меняем путь на абсолютный
				var imageName = item?.CarImageUrl?.Replace($"{_navManager.BaseUri}CarImages/", "");

				if (imageName is not null)
					_fileUpload.DeleteFile(imageName);
			}
			// *********************************

			// 77.3 --> Идём и модифицируем метод удаления в TeslaCarRepository метод DeleteCar(int carId)
			await _db.DeleteCar(DeletingCarId.Value);
			await _js.ToastrSuccess($"{DeletingCarId.Value} deleting successful!");

			Cars = await _db.GetAllCars();
		}
		ShowCloseModal = false;
	}
	void DeletingHandler(TeslaCarDTO car)
	{
		DeletingCarId = car.Id;
		objForRemoving = car;
		ShowCloseModal = true;
	}

	void CloseModalHandler()
	{
		ShowCloseModal = !ShowCloseModal;

	}

	//async Task UpdateHandler()
	//{
	//	Cars = await _db.GetAllCars();
	//}
}