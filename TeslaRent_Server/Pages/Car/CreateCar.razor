@*29.1 Компонент для добавления новых машин*@
@page "/car-list/create"

@*46.2 Добавляем маршрут для редактирования*@
@page "/car-list/edit/{Id:int}"

@inject ITeslaCarRepository _db
@inject NavigationManager _navManager

@*50 Внедряем функционал JS*@
@inject IJSRuntime _js

@*62.2*@
@using TeslaRent_Server.Service.IService
@inject IFileUpload _fileUpload
@*62.3 Идём в класс Program и конфигурируем зависимость загрузчика*@

@*65.3 Внедряем зависимость репозитория картинок*@
@inject ITeslaCarImageRepository _imageRepository
@*************************************************************@
@using System.Linq
@inject ITeslaCarAccessoryRepository _acc
@inject NavigationManager _navManager

@*108.1 Комментируем атрибут Authorize*@
@*106. Добавляем атрибут доступа только для авторизованных пользователей*@
@*@attribute [Authorize]*@

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@title Car</h3>
    <div class="col-12">
        <div class="card">
            <div class="card-body" style="background-color: #004bff0f">
                @*29.2 Добавляем форму Blazor, которая требует модели*@
                <EditForm Model="carModel" OnValidSubmit="CreateUpdateCarHandler">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label>Name</label>
                        <InputText @bind-Value="carModel.Name" class="form-control" placeholder="Enter car name..." />
                        <ValidationMessage For="()=> carModel.Name" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="carModel.Occupancy" class="form-control" />
                        <ValidationMessage For="()=> carModel.Occupancy" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Regular Rate</label>
                        <InputNumber @bind-Value="carModel.RegularRate" class="form-control" />
                        <ValidationMessage For="()=> carModel.RegularRate" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Number Of Seats</label>
                        <InputText @bind-Value="carModel.NumberOfSeats" class="form-control" placeholder="Enter number of seats..." />
                        <ValidationMessage For="()=> carModel.NumberOfSeats" />
                    </div>

                    @*87. Внедряем список комплектации*@
                    <div class="mb-3">
                        <select class="form-control form-select" @onchange="ChangeCurrentCarHandler">
                            @if (accessories is not null)
                            {
                                <option selected value="">Select car accessories</option>
                                @foreach (var item in accessories)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        </select>
                    </div>
                    @if (carModel.CarAccessories is not null && carModel.CarAccessories.Any())
                    {
                        <div class="row mb-3">
                            @foreach (var icon in carModel.CarAccessories)
                            {
                                <div class="col-1">
                                    <i class="@icon.Icon" style="font-size: 50px;"></i>
                                </div>
                            }
                        </div>
                    }

                    <div class="form-group mb-3" style="height: 250px;">
                        <label>Details</label>
                        @*84.1 Вставляем визуальный редактор*@
                        @*<InputTextArea @bind-Value="carModel.Details" class="form-control" placeholder="Enter car description..." />
                            <ValidationMessage For="()=> carModel.Details" />*@

                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please, enter car details ...">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>

                    @*60.1 Реализовать вывод компонента загрузки файлов*@
                    <div class="form-group mb-3" style="padding-top: 75px">
                        <InputFile OnChange="ImageUploadHandler" multiple></InputFile>
                    </div>
                    @*////////////////////////////////////////////*@

                    @*72. Отображаем индикатор загрузки*@
                    @if (uploadsStart)
                    {
                        <div class="col">
                            <span><i class="fas fa-spinner"></i>Please, wait when images are uploading ...</span>
                        </div>
                    }

                    @*//////////////////////////////*@

                    @*63. Блок вывода картинок*@
                    <div class="row mb-3">
                        @if (carModel.ImageUrls is not null && carModel.ImageUrls.Any())
                        {
                            int imageCount = 1;
                            foreach (var item in carModel.ImageUrls)
                            {
                                <div class="col-sm-12 col-md-4 col-xl-3 mt-3">
                                    <div class="car-image" style="background: url('@item') 50% 50%;">
                                        <span class="car-image-title">@imageCount</span>
                                        <span class="car-image-header"></span>
                                        @*69.1 Добавить событие нажатия по кнопке*@
                                        <button class="btn btn-outline-danger btn-block car-image-delete-button" type="button" @onclick="() => DeleteImage(item)"><span class="oi oi-trash"></span></button>
                                    </div>
                                </div>
                                imageCount++;
                            }
                        }
                    </div>
                    @*////////////////////////////////////////////*@

                    <button class="btn btn-outline-primary" type="submit">@title Car</button>
                    <NavLink href="car-list" class="btn btn-outline-success">Back To Car List</NavLink>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    // 46.3 Добавляем свойство параметра для маршрута
    [Parameter] public int? Id { get; set; }

    [Parameter] public EventCallback OnUpdateListHandler {  get; set; }


    // 29.3 Добавляем модель данных DTO, добавив ссылку на проект Models
    // Модели будут использоваться во всём проекте, поэтому добавляем using глобально
    TeslaCarDTO carModel = new();
    string title = "Create";

    // 65.4 Добавляем свойство для хранения картинок
    TeslaCarImageDTO carImage = new();

    // 70.1 Добавляем массив для хранения удалённых при редактировании картинок
    List<string> DeletedImageNames = new();

    // 71. Вводим новую переменную для индикации загрузки картинок
    bool uploadsStart;

    // 84.2 Назначаем нужную переменную
    public BlazoredTextEditor QuillHtml = new();

    List<CarAccessoryDTO> accessories;
    List<CarAccessoryDTO> accessoriesForAdding = new();

    // 108.2 Создаём каскадный параметр
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState {  get;  set; }

    // 46.1 Создаём метод инициализации значений компонента
    // И последующей проверки, создаём мы или редактируем машину
    protected override async Task OnInitializedAsync()
    {
        // Далее, перед реализацией, добавляем ещё один маршрут для редактирования

         // 109. Реализовываем логику проверки авторизации пользователя
            var authState = await AuthenticationState;
            //if (!authState.User.Identity.IsAuthenticated)
            if (!authState.User.IsInRole(Common.SD.ADMIN_ROLE))
            {
                // 110. Добавить получение и отправку текущего url
                var url = new Uri(_navManager.Uri);
                _navManager.NavigateTo($"/identity/account/login?returnUrl={url.LocalPath}");
            }

        // 46.4 Реализовываем проверку, создаём или редактируем
        if (Id is not null)
        {
            // Updating
            title = "Update";
            carModel = await _db.GetCar(Id.Value);

            var tempAccessories = await _acc.GetAllAccessoriesAsync();
            accessories = tempAccessories.ToList();

            // Updating accessories
            if (carModel.CarAccessories is not null && carModel.CarAccessories.Any())
            {
                foreach (var item in carModel.CarAccessories.ToList())
                {
                    accessories.Remove(item);
                }
            }

            // 67. Заполняем модель картинками
            if (carModel?.TeslaCarImages is not null)
                carModel.ImageUrls = carModel.TeslaCarImages.Select(x => x.CarImageUrl).ToList();
        }
        else
        {
            // Creating
            carModel = new();
            var tempAccessories = await _acc.GetAllAccessoriesAsync();
            accessories = tempAccessories.ToList();
        }
        // После этого, идём в компонент листа и реализовываем кнопку редактирования
    }

    // 84.5 При инициализации компонента, устанавливаем значение описания в графический редактор
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(carModel.Details))
                    await this.QuillHtml.LoadHTMLContent(carModel.Details);
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }

        }
    }

    // 48.1 Переименовываем метод в универсальный CreateUpdateCarHandler
    //async Task CreateNewCar()
    async Task CreateUpdateCarHandler()
    {
        // 48.2
        try
        {
            var carDetailsByName = await _db.IsCarUnique(carModel.Name, carModel.Id);
            if (carDetailsByName is not null)
            {
                await _js.ToastrError("Car name already exists.");
                return;
            }

            if (!carModel.Id.Equals(0) && title.Equals("Update"))
            {
                // Update
                // 84.4 При создании получаем данные из визуального редактора
                carModel.Details = await QuillHtml.GetHTML();

                var updateCarResult = await _db.UpdateCar(carModel.Id, carModel, accessoriesForAdding);
                if (updateCarResult is not null)
                {
                    // 68. Обновление картинок при редактировании машины
                    // Баг был сдесь, в условии блока IF
                    if (carModel.ImageUrls is not null)
                    {
                        // 70.0
                        if (DeletedImageNames is not null && DeletedImageNames.Any())
                        {
                            foreach (var item in DeletedImageNames)
                            {
                                // 90.3 Меняем путь на абсолютный
                                var name = item.Replace($"{_navManager.BaseUri}CarImages/", "");

                                var result = _fileUpload.DeleteFile(name);

                                //70.1 На этом этспе идём в репозиторий и добавляем новый метод
                                // 70.3
                                await _imageRepository.DeleteTeslaCarImageByImageUrl(item);
                            }
                        }

                        await AddCarImage(updateCarResult);
                    }

                    // *****************************************************************

                    await _js.ToastrSuccess($"{updateCarResult.Name} updating successful!");
                    _navManager.NavigateTo("car-list");
                }

                else
                    await _js.ToastrError("Shit happens.. Not updated!");
            }
            else
            {
                // Create

                // 84.4 При создании получаем данные из визуального редактора
                carModel.Details = await QuillHtml.GetHTML();

                var createdCar = await _db.CreateCar(carModel);

                if (createdCar is not null)
                {
                    // 65.1 новый метод AddCarImage
                    await AddCarImage(createdCar);
                    // *************************************
                    await _js.ToastrSuccess($"{createdCar.Name} creating successful!");
                    _navManager.NavigateTo("car-list");
                }
                else
                    await _js.ToastrError("Shit is happen.. Not created!");

            }

        }
        catch (Exception ex)
        {
            // Do something with exception
        }

        // На этом этапе переходим к внедрению зависимости нашего сервиса, шаг 30
        // 48.3 Переносим в блок Create
        //var carDetailsByName = await _db.IsCarUnique(carModel.Name);

        //if (carDetailsByName is not null)
        //{
        //	// TODO: Show error
        //	return;
        //}

        //var createdCar = await _db.CreateCar(carModel);

        //// TODO: Check creation status

        //_navManager.NavigateTo("car-list");
    }

    // 62.1 Реализовываем метод обработки загрузки
    async Task ImageUploadHandler(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var item in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(item.Name);

                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        // 62.2 На этом месте подключаем нужный Using и внедряем библиотеку
                        var uploadedImagePath = await _fileUpload.UploadFileAsync(item);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await _js.ToastrError("Please select .jpg/.jpeg/.png files only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (carModel.ImageUrls is not null)
                        carModel.ImageUrls.AddRange(images);
                    else
                    {
                        carModel.ImageUrls = new();
                        carModel.ImageUrls.AddRange(images);
                    }
                }
                else
                    await _js.ToastrError("Image uploading failed");
            }
        }
        catch (Exception ex)
        {
            await _js.ToastrError(ex.Message);
        }
    }

    // 65.2 Реализовываем метод
    async Task AddCarImage(TeslaCarDTO carDetails)
    {
        // Перед реализацией метода нам понадобится внедрить зависимость ITeslaCarRepository и добавить переменную для хранения
        foreach (var item in carModel.ImageUrls)
        {
            if (carModel.TeslaCarImages is null || carModel.TeslaCarImages.Where(x => x.CarImageUrl == item).Count() == 0)
            {
                carImage = new()
                    {
                        CarId = carDetails.Id,
                        CarImageUrl = item
                    };
                await _imageRepository.CreateTeslaCarImage(carImage);
            }
        }
    }

    // 69.2 Реализуем событие нажатия по кнопке Delete
    async Task DeleteImage(string imageUrl)
    {
        try
        {
            var imageIndex = carModel.ImageUrls.FindIndex(x => x == imageUrl);
            // 90.4 Меняем путь на абсолютный
            var imageName = imageUrl.Replace($"{_navManager.BaseUri}CarImages/", "");

            // Create car
            if (carModel.Id.Equals(0) && title == "Create")
            {
                var result = _fileUpload.DeleteFile(imageName);
            }
            else
            {
                // Update car
                DeletedImageNames ??= new();
                DeletedImageNames.Add(imageUrl);
            }

            carModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await _js.ToastrError(ex.Message);
        }
    }

    // 84.3 Определяем методы обработки редактора
    public void SetHTML()
    {
        if (!string.IsNullOrWhiteSpace(carModel.Details))
            this.QuillHtml.LoadHTMLContent(carModel.Details);

        StateHasChanged();
    }

    async Task ChangeCurrentCarHandler(ChangeEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            var accId = Convert.ToInt32(args.Value);

            if (carModel.CarAccessories.FirstOrDefault(x => x.Id == accId) == null)
            {
                // Получаем обьъект для добавления
                var accessory = await _acc.GetSingleAccessoryAsync(accId);
                //accessory.Car.Add(carModel);

                carModel.CarAccessories.Add(accessory);

                var listItem = accessories.FirstOrDefault(x => x.Id == accessory.Id);
                accessories.Remove(listItem);
            }
        }
    }
}