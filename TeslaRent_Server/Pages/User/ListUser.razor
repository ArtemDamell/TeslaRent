@*123.1 Создаём маршрут к компоненту*@
@page "/user-list"
@using Microsoft.AspNetCore.Identity

@inject IUserRepository _userManager
@inject IJSRuntime _js

@*@attribute [Authorize(Roles = Common.SD.ADMIN_ROLE)]*@

@*123.2 Создаём разметку компонента*@
<div class="row mt-4">
	<div class="col">
		<h1 class="card-title text-info">All User's</h1>
	</div>
</div>

@*123.3 Создаём таблицу вывода пользователей*@
<div class="row mt-3">
	<div class="col">
		<table class="table table-striped table-hover">
			<thead class="bg-info">
				<tr>
					<th>User ID</th>
					<th>User Name</th>
					<th>Ban expired</th>
					<th>Access filed count</th>
					<th>Role Name</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@if (userList is null)
				{
					<tr>
						<td colspan="5">
							<label>Loading users ...</label>
						</td>
					</tr>
				}
				else if (userList.Any())
				{
					@foreach (var item in userList)
				   {
					   <tr>
						   <td>@item.Id</td>
						   <td>@item.UserName</td>
						   <td>@item.LockoutEnd</td>
						   <td>@item.AccessFailedCount</td>
						   <td>
							 role
						   </td>
						   <td>
							   <button type="button" class="btn btn-primary" @onclick="(() =>EditHandler(item))">Edit</button>
							   <button type="button" class="btn btn-danger" @onclick="(() =>DeletingHandler(item))">Delete</button>
						   </td>
					   </tr>
				   }
				}
				else
				{
					<tr>
						<td colspan="6">
							<label>No users found ...</label>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

<UpdateUser OnShowCloseHandler="OnShowCloseHandler" OnShowCloseModal="ShowCloseModal" OnUser="userForUpdating" />

@code {
	IEnumerable<IdentityUser> userList;
	IdentityUser userForUpdating;
	bool ShowCloseModal = false;

	protected override async Task OnInitializedAsync()
	{
		userList = await _userManager.GetAllUsersAsync();
	}

	async Task DeletingHandler(IdentityUser user)
	{
		var result = await _userManager.DeleteUserAsync(user);

		if (result)
		{
			await _js.ToastrSuccess($"{user.UserName} deleting successful!");
			userList = await _userManager.GetAllUsersAsync();
		}
		else
			await _js.ToastrError($"Shit is happen... Not deleted!");
	}

	void EditHandler(IdentityUser user)
	{
		userForUpdating = user;
		OnShowCloseHandler();

	}

	async Task OnShowCloseHandler()
	{
		if(ShowCloseModal)
		{
			ShowCloseModal = !ShowCloseModal;
			userList = await _userManager.GetAllUsersAsync();
		}
		else
			ShowCloseModal = !ShowCloseModal;
	}
}
