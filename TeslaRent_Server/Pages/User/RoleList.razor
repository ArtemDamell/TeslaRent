@page "/role-list"

@using Microsoft.AspNetCore.Identity

@inject IRoleRepository _roleManager
@inject IJSRuntime _js

@*@attribute [Authorize(Roles = Common.SD.ADMIN_ROLE)]*@

<div class="row mt-4">
    <div class="col-8">
        <h1 class="card-title text-info">All Role's</h1>
    </div>
    <div class="col-3 offset-1">
        <button type="button" class="btn btn-success" @onclick="AddRole">Add New Role</button>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <table class="table table-striped table-hover">
            <thead class="bg-info">
                <tr>
                    <th>Role ID</th>
                    <th>Role Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (roleList is null)
                {
                    <tr>
                        <td colspan="5">
                            <label>Loading roles ...</label>
                        </td>
                    </tr>
                }
                else if (roleList.Any())
                {
                    @foreach (var item in roleList)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td>
                                <button type="button" class="btn btn-primary" @onclick="(() =>UpdateRole(item))">Edit</button>
                                <button type="button" class="btn btn-danger" @onclick="(() =>DeleteRole(item))">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">
                            <label>No roles found ...</label>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<CreateUpdateRoleModal OnShowCloseModal="ShowCloseModal" OnCurrentRole="roleObj" OnShowCloseModalHandler="OnShowCloseHandler" OnValidSubmitHandler="ValidSubmitHandler" />

@code {
    IEnumerable<IdentityRole> roleList;
    IdentityRole roleObj;
    bool ShowCloseModal = false;

    protected override async Task OnInitializedAsync()
    {
        roleList = await _roleManager.GetAllRolesAsync();
    }

    void OnShowCloseHandler()
    {
        if (ShowCloseModal)
        {
            ShowCloseModal = !ShowCloseModal;
            Task.Run(async () =>
            {
                roleList = await _roleManager.GetAllRolesAsync();
            });
        }
        else
            ShowCloseModal = !ShowCloseModal;
    }

    void AddRole()
    {
        roleObj = new();
        OnShowCloseHandler();
    }

    void UpdateRole(IdentityRole role)
    {
        roleObj = role;
        OnShowCloseHandler();
    }

    async Task DeleteRole(IdentityRole role)
    {
        var result = await _roleManager.DeleteRoleAsync(role);

        if (result)
            await _js.ToastrSuccess($"Role deleting: {role.Name} successful!");
        else
            await _js.ToastrError($"User role was not deleted!");
    }

    async Task ValidSubmitHandler(IdentityRole updatedRole)
    {
        roleObj = updatedRole;

        if (updatedRole.NormalizedName is not null)
        {
            if (roleObj is not null && roleObj.Name is not null)
            {
                roleObj.NormalizedName = updatedRole.Name.Normalize();
                var roleUpdateResult = await _roleManager.UpdateRoleAsync(roleObj);

                if (roleUpdateResult)
                    await _js.ToastrSuccess($"Role updating: {roleObj.Name} successful!");
                else
                    await _js.ToastrError($"User role is not updated!");
            }
        }
        else
        {
            var result = await _roleManager.CreateNewRole(roleObj);

            if (result)
                await _js.ToastrSuccess($"Role creating: {roleObj.Name} successful!");
            else
                await _js.ToastrError($"User role is not created!");
        }
    }
}
