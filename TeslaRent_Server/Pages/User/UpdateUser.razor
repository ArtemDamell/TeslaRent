@using Microsoft.AspNetCore.Identity

@*106. Добавляем атрибут доступа только для авторизованных пользователей*@
@*@attribute [Authorize]*@

<div class="modal show fade" data-backdrop="static" data-keyboard="false" id="deleteConfModal" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog modal-modal-dialog-centered" role="document">
        <EditForm Model="@OnUser" OnValidSubmit="SubmitHandler">
            <div class="modal-content">

                <div class="modal-header bg-success">
                    <h5 class="modal-title text-white" id="exModalLabel">@title User</h5>
                    <button type="button" class="btn-close bg-white" @onclick="OnShowCloseHandler" datadata-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true"></span>
                    </button>
                </div>

                <div class="modal-body text-center">
                    <div class="row">
                        <div class="col">
                            <DataAnnotationsValidator />
                            <div class="form-group mb-3">
                                <label>User ID</label>
                                <div>
                                    <InputText @bind-Value="OnUser.Id" class="form-control" disabled />
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                <label>User Name</label>
                                <div>
                                    <InputText @bind-Value="OnUser.UserName" class="form-control" placeholder="Enter user name..." disabled />
                                    <ValidationMessage For="() => OnUser.UserName" />
                                </div>
                            </div>

                            <div class="form-group mb-3">
                                <label>Current Role</label>
                                <div>
                                    <input value="@(OnCurrentRole is not null && !string.IsNullOrWhiteSpace(OnCurrentRole.Name) ? OnCurrentRole.Name : "-- NO ROLE --" )" class="form-control" disabled />
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                <label>Roles</label>
                                <div>
                                    <InputSelect @bind-Value="@selectedRoleId" class="form-control form-select">
                                        <option value="" selected>Select role</option>
                                        @foreach (var role in OnRoleList)
                                        {
                                            <option value="@role.Id" selected="@((OnCurrentRole is not null && OnCurrentRole.Id == role.Id) ? true : false)">@role.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="form-group mb-3">
                                <label>User Email</label>
                                <div>
                                    <InputText @bind-Value="OnUser.Email" class="form-control" placeholder="Enter user email ..." />
                                    <ValidationMessage For="() => OnUser.Email" />
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                <label>Ban expired date</label>
                                <div>
                                    <InputDate @bind-Value="OnUser.LockoutEnd" class="form-control" />
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                <label>User Phone number</label>
                                <div>
                                    <InputText @bind-Value="OnUser.PhoneNumber" class="form-control" />
                                </div>
                            </div>
                            <div class="mb-3 border rounded p-1">
                                <div class="form-check form-switch">
                                    <input @bind-value="OnUser.PhoneNumberConfirmed" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" checked="@((OnUser.PhoneNumberConfirmed) ? true : false)" />
                                    <label class="form-check-label" style="float: left" for="flexSwitchCheckDefault">Phone is confirmed?</label>
                                </div>
                            </div>
                            <div class="mb-3 border rounded p-1">
                                <div class="form-check form-switch">
                                    <input @bind-value="OnUser.EmailConfirmed" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" checked="@((OnUser.EmailConfirmed) ? true : false)" />
                                    <label class="form-check-label" style="float: left" for="flexSwitchCheckDefault">Email is confirmed?</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline-success" type="submit">
                        @title user
                    </button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="OnShowCloseHandler" data-dismiss="modal">
                        Cancel
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [Parameter] public IdentityUser OnUser { get; set; }
    [Parameter] public IdentityRole OnCurrentRole { get; set; }

    [Parameter] public IEnumerable<IdentityRole> OnRoleList { get; set; }

    [Parameter] public EventCallback OnShowCloseHandler { get; set; }
    [Parameter] public EventCallback<(IdentityUser, string)> OnValidSubmitHandler { get; set; }

    string selectedRoleId = string.Empty;
    string title = "Update";

    void SubmitHandler()
    {
        OnValidSubmitHandler.InvokeAsync((OnUser, selectedRoleId));
    }
}
