@page "/cars/allexs"

@*169. Переходим в компонент TeslaCars проекта TeslaRent_Client и начинаем его реализовывать*@
@inject ILocalStorageService _localStorage
@inject IJSRuntime _js
@inject ICarService _carService

@*173. Заключаем весь UI в блок if*@

@if (Cars is not null && Cars.Any())
{
    @*172. Реализовываем компонент TeslaCars UI*@
    <EditForm class="bg-light" Model="indexModel" OnValidSubmit="SaveBookingInfoHandler">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="pt-3 pb-5 px-5 mx-1 mx-md-0" style="background-color: #465683">

            <div class="row px-3 mx-3">
                <div class="col-sm-12 col-md-4">
                    <div class="form-group">
                        <label class="text-warning">Start rent date</label>
                        <InputDate class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" @bind-Value="indexModel.StartDate" />
                    </div>
                </div>
                <div class="col-sm-12 col-md-4">
                    <div class="form-group">
                        <label class="text-warning">End rent date</label>
                        <InputDate class="form-control" @bind-Value="indexModel.EndDate" readonly="readonly" />
                    </div>
                </div>
                <div class="col-sm-12 col-md-2">
                    <div class="form-group">
                        <label class="text-warning">Rent Days</label>
                        <select class="form-control form-select" @bind="indexModel.RentDays">
                            <option value="Select" selected disabled="disabled">Select Rent Days No.</option>
                            @for (var i = 1; i < 31; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="col-sm-12 col-md-2">
                    <div class="form-group" style="margin-top: 1.5rem !important;">
                        @if (isProcessing)
                        {
                            <button class="btn btn-info btn-block form-control" disabled="disabled"><i class="fa-solid fa-spinner"></i></button>
                        }
                        else
                        {
                            <input type="submit" value="Update" class="btn btn-info btn-block form-control" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

        @*Добавляем цикл для вывода данных*@
        @foreach (var item in Cars)
        {
            <div class="row p-2 mt-3 d-flex align-items-center" style="border-radius: 20px; border: 1px groove #000; background-color: #ffffffe6;">
                <div class="col-12 col-lg-3 col-md-4">
                    <!-- Carousel wrapper -->
            <div id="carouselBasicExample" class="carousel slide carousel-fade" data-mdb-ride="carousel">
                        <!-- Indicators -->
                <div class="carousel-indicators">
                            <button type="button"
                            data-mdb-target="#carouselBasicExample"
                            data-mdb-slide-to="0"
                            class="active"
                            aria-current="true"
                            aria-label="Slide 1"></button>
                            @*<button type="button"
                                data-mdb-target="#carouselBasicExample"
                                data-mdb-slide-to="1"
                                aria-label="Slide 2"></button>
                                <button type="button"
                                data-mdb-target="#carouselBasicExample"
                                data-mdb-slide-to="2"
                                aria-label="Slide 3"></button>*@
                        </div>

                        <!-- Inner -->
                <div class="carousel-inner">
                            <!-- Single item -->
                    <div class="carousel-item active h-25">
                                <img src="https://images.hdqwalls.com/wallpapers/tesla-model-3-2017-lf.jpg" class="d-block w-100" alt="Sunset Over the City" />
                            </div>


                            <!-- Inner -->
                            <!-- Controls -->
                    <button class="carousel-control-prev" type="button" data-mdb-target="#carouselBasicExample" data-mdb-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-mdb-target="#carouselBasicExample" data-mdb-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        </div>
                    </div>
                    <!-- Carousel wrapper -->

        </div>

                <div class="col-12 col-md-8 col-lg-9">
                    <div class="row pt-3">
                        <div class="col-12 col-lg-8">
                            <p class="card-title text-warning" style="font-size:xx-large">@item.Name</p>
                            <p class="card-text">@((MarkupString)item.Details)</p>
                        </div>
                        <div class="col-12 col-lg-4">
                            <div class="row pb-3 pt-2">
                                <div class="col-12 col-lg-11">
                                    @*220.1 Добавить в компонент TeslaCars логику нового флага к кнопке Details*@
                                    @if (item.IsBooked)
                                    {
                                        <button disabled class="btn btn-secondary btn-block">Sold Out</button>
                                    }
                                    else
                                    {
                                        <NavLink href="@($"car/car-details/{item.Id}")" class="btn btn-success btn-block">Book</NavLink>
                                    }
                                    @*После этого делаем подобную логику в компоненте CarDetails*@
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12 pb-5">
                                    <span class="float-right">
                                        @*<span class="float-right">Max Occupancy : ## adults</span>*@
                                        <span class="float-right pt-1">Number of seats: @item.NumberOfSeats</span>
                                        <h4 class="text-warning font-weight-bold pt-4"><span style="border-bottom: 1px groove #ff6a00">@item.TotalAmount.ToString("#,#.00;(#,#.00#)") €</span></h4>
                                        <span class="float-right pt-1 text-primary">Total cost for @item.TotalDays day(s)</span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    // Добавляем гифку загрузки из index.html
    <div class="text-center">
        <img src="https://mir-s3-cdn-cf.behance.net/project_modules/max_1200/2796ed81999693.5d10c0872415e.gif" />
    </div>
}

@code {
    IndexVM indexModel = new();
    public IEnumerable<TeslaCarDTO> Cars { get; set; } = new List<TeslaCarDTO>();

    bool isProcessing;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (await _localStorage.GetItemAsync<IndexVM>(SD.LOCAL_INITIALBOOKING) is not null)
            {
                indexModel = await _localStorage.GetItemAsync<IndexVM>(SD.LOCAL_INITIALBOOKING);
            }
            else
            {
                indexModel.RentDays = 1;
            }
            await LoadCars();
        }
        catch (Exception ex)
        {
            await _js.ToastrError(ex.Message);
        }
    }

    async Task LoadCars()
    {
        Cars = await _carService.GetAllExistingCars(indexModel.StartDate.ToString("MM.dd.yyyy"), indexModel.EndDate.ToString("MM.dd.yyyy"));

        // 174.2 Идём в компонент TeslaCras и вносим правки
        foreach (var item in Cars)
        {
            item.TotalAmount = item.RegularRate * indexModel.RentDays;
            item.TotalDays = indexModel.RentDays;
        }
    }

    async Task SaveBookingInfoHandler()
    {
        isProcessing = true;
        indexModel.EndDate = indexModel.StartDate.AddDays(indexModel.RentDays);
        await _localStorage.SetItemAsync(SD.LOCAL_INITIALBOOKING, indexModel);
        await LoadCars();
        isProcessing = false;
    }
    }
