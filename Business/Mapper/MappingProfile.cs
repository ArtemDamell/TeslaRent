using AutoMapper;
using DataAccess.Data;
using Models;

namespace Business.Mapper
{
    // 21. Создаём класс профиля для AutoMapper
    /*
        Чтобы превратить обычный класс в профиль автомаппера и для того,
        Чтобы он унаследовал весь необходимый функционал, мы должны унаследовать
        Наш класс от базового Profile
     */
    public class MappingProfile : Profile
    {
        // 21.1 Создаём конструктор класса для начальной настройки профиля
        public MappingProfile()
        {
            // 21.2 Создаём метод сопастовления 2-х объектов
            /*
                Этот метод позволяет сопаставить 2 модели и искать в них
                Одинаковые имена свойств. Если таковые будут найдены, то в них
                Автоматически занесутся данные из переданной в первом параметре
                Модели данные. Если же имена не будут соответствовать, то в те 
                Свойства, которые небыли найдены занесётся null
             */
            CreateMap<TeslaCarDTO, TeslaCar>();
            // --> Возвращаемся в TeslaCarRepository

            // 25. Добавляем маршрут обратной конвертации
            CreateMap<TeslaCar, TeslaCarDTO>();

            // 55. Добавляем новый маршрут для изображений
            // ReverseMap() позволяет в автоматическом режиме делать обратную конвертацию
            // Этот метод работает только при полном совпадении названий свойств модели
            CreateMap<TeslaCarImage, TeslaCarImageDTO>().ReverseMap();
        }
    }
}
